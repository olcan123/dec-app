generator client {
  provider        = "prisma-client-js"
  moduleFormat    = "esm"
  // Add this line to generate the browser client
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id               Int           @id @default(autoincrement())
  uidNumber        String        @unique @map("uid_number")
  title            String
  authorizedPerson String?       @map("authorized_person")
  taxOffice        String?       @map("tax_office")
  isActive         Boolean       @default(true) @map("is_active")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  notes            String?
  Declarations     Declaration[]
  Documents        Document[]
  GeneralNotes     GeneralNote[]
  Reminders        Reminder[]

  @@map("Customers")
}

model DeclarationType {
  id            Int                      @id @default(autoincrement())
  typeName      String                   @map("type_name")
  description   String?
  defaultDay    Int?                     @map("default_day")
  period        DeclarationPeriod        @default(Monthly)
  isActive      Boolean                  @default(true) @map("is_active")
  colorCode     String?                  @map("color_code") @db.VarChar(7)
  priorityLevel DeclarationPriorityLevel @default(Medium) @map("priority_level")
  Declarations  Declaration[]

  @@map("DeclarationTypes")
}

model Declaration {
  id               Int                 @id @default(autoincrement())
  customerId       Int?                @map("customer_id")
  typeId           Int                 @map("type_id")
  periodName       String              @map("period_name") @db.VarChar(50)
  dueDate          DateTime            @map("due_date") @db.Date
  completionDate   DateTime?           @map("completion_date")
  status           DeclarationStatus   @default(Pending)
  reminderDays     Int                 @default(7) @map("reminder_days")
  totalAmount      Decimal?            @map("total_amount") @db.Decimal(15, 2)
  paidAmount       Decimal             @default(0) @map("paid_amount") @db.Decimal(15, 2)
  lateFee          Decimal             @default(0) @map("late_fee") @db.Decimal(15, 2)
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  completedBy      String?             @map("completed_by")
  priority         DeclarationPriority @default(Medium)
  DeclarationNotes DeclarationNote[]
  Customer         Customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  DeclarationType  DeclarationType     @relation(fields: [typeId], references: [id])
  Documents        Document[]
  Reminders        Reminder[]

  @@map("Declarations")
}

model DeclarationNote {
  id            Int         @id @default(autoincrement())
  declarationId Int         @map("declaration_id")
  title         String?
  content       String
  createdBy     String?     @map("created_by")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  tags          String?     @map("tags")
  Declaration   Declaration @relation(fields: [declarationId], references: [id], onDelete: Cascade)

  @@map("DeclarationNotes")
}

model GeneralNote {
  id           Int                 @id @default(autoincrement())
  customerId   Int?                @map("customer_id")
  category     GeneralNoteCategory @default(General)
  title        String
  content      String
  createdBy    String?             @map("created_by")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  reminderDate DateTime?           @map("reminder_date") @db.Date
  isCompleted  Boolean             @default(false) @map("is_completed")
  tags         String?
  Customer     Customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("GeneralNotes")
}

model Document {
  id            Int          @id @default(autoincrement())
  declarationId Int?         @map("declaration_id")
  customerId    Int?         @map("customer_id")
  documentName  String       @map("document_name")
  filePath      String       @map("file_path") @db.VarChar(500)
  fileType      String?      @map("file_type") @db.VarChar(50)
  fileSizeBytes Int?         @map("file_size_bytes")
  description   String?
  uploadedAt    DateTime     @default(now()) @map("uploaded_at")
  uploadedBy    String?      @map("uploaded_by")
  Customer      Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Declaration   Declaration? @relation(fields: [declarationId], references: [id], onDelete: Cascade)

  @@map("Documents")
}

model Reminder {
  id            Int                @id @default(autoincrement())
  declarationId Int?               @map("declaration_id")
  customerId    Int?               @map("customer_id")
  reminderDate  DateTime           @map("reminder_date")
  reminderType  ReminderType       @default(System) @map("reminder_type")
  message       String?
  isSent        Boolean            @default(false) @map("is_sent")
  sentAt        DateTime?          @map("sent_at")
  recurrence    ReminderRecurrence @default(Once)
  isActive      Boolean            @default(true) @map("is_active")
  Customer      Customer?          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Declaration   Declaration?       @relation(fields: [declarationId], references: [id], onDelete: Cascade)

  @@map("Reminders")
}

enum DeclarationPriorityLevel {
  Low
  Medium
  High
  Critical

  @@map("priority_level")
}

enum DeclarationPeriod {
  Monthly
  Quarterly
  SemiAnnual
  Annual

  @@map("period")
}

enum DeclarationStatus {
  Pending
  InProgress
  Completed
  Overdue

  @@map("declaration_status")
}

enum DeclarationPriority {
  Low
  Medium
  High
  Urgent

  @@map("declaration_priority")
}

enum GeneralNoteCategory {
  General
  Meeting
  Reminder
  Important
  Other

  @@map("general_note_category")
}

enum ReminderType {
  Email
  SMS
  System
  Manual

  @@map("reminder_type")
}

enum ReminderRecurrence {
  Once
  Daily
  Weekly
  Monthly

  @@map("reminder_recurrence")
}
